@{
	ViewData["Title"] = "Our Story";
}
<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 300px; /* The height is 400 pixels */
        width: 35%; /* The width is the width of the web page */
    }
</style>
<div class="jumbotron">
	<h2>@ViewData["Title"]</h2>
	<p>
		@ViewData["Message1"]
		<br />
		@ViewData["Message2"]
		<br />
		@ViewData["Message3"]
		<br />
		@ViewData["Message4"]

	</p>
	<p class="text-warning">Warning: @ViewData["Message5"]</p>

</div>
<div>
    <center><div id="map"></div></center>
    <script>
        function deserializeSingleMarker(markerStr) {
            var res = markerStr.split(',');
            var location = { lat: parseFloat(res[0]), lng: parseFloat(res[1]) };
            return location;
        }

        function splitSeveralMarkers(markers) {
            var res = markers.split('|');
            return res;
        }
        // Initialize and add the map
        function initMap() {
            var address = '@Html.Raw(ViewData["Address"])';
            severalMarkers = splitSeveralMarkers(address);
            center = deserializeSingleMarker(severalMarkers[0]);
            //The map
            var map = new google.maps.Map(
                document.getElementById('map'), { zoom: 8, center: center });
            for (var i = 0; i < severalMarkers.length; i++) {
                var location = deserializeSingleMarker(severalMarkers[i]);
                new google.maps.Marker({ position: location, map: map });
            }
        }

    </script>

    <!--Load the API from the specified URL
    * The async attribute allows the browser to render the page while the API loads
    * The key parameter will contain your own API key (which is not needed for this tutorial)
    * The callback parameter executes the initMap() function
    -->
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBkDRcmsIUuyqoobMW6jiQch4XkIMimHN8&callback=initMap">
    </script>
</div>


